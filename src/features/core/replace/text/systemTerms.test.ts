import { describe, expect, test } from "vitest";
import type {
  System_Terms,
  Terms_Basic,
  Terms_GameCommands,
  Terms_BasicArray,
  Terms_CommandArray,
  Terms_Messages,
} from "@RpgTypes/rmmz";
import {
  makeTermsBasic,
  makeTermsCommandArray,
  makeTermsMessages,
  makeParamNamesArray,
} from "@RpgTypes/rmmz";
import { replaceSystemTerms } from "./systemTerms";

const mockBasicTerms = {
  exp: "EXP",
  hp: "HP",
  mp: "MP",
  level: "Level",
  tp: "TP",
  hpA: "HP",
  mpA: "MP",
  tpA: "TP",
  levelA: "LV",
  experience: "Experience",
} as const satisfies Terms_Basic;

const mockCommands = {
  armor: "Armor",
  attack: "Attack",
  buy: "Buy",
  cancel: "Cancel",
  clear: "Clear",
  continueGame: "Continue",
  equip: "Equip",
  equip2: "Equip2",
  escape: "Escape",
  fight: "Fight",
  formation: "Formation",
  gameEnd: "Game End",
  guard: "Guard",
  item: "Item",
  keyItem: "Key Item",
  newGame: "New Game",
  optimize: "Optimize",

  options: "Options",
  save: "Save",
  sell: "Sell",

  skill: "Skill",
  status: "Status",
  toTitle: "To Title",
  weapon: "Weapon",
} as const satisfies Terms_GameCommands;

const mockMessages: Terms_Messages = {
  levelUp: "Leveled Up!",
  obtainExp: "Gained EXP",
  obtainGold: "Gained Gold",
  obtainItem: "Obtained",
  actionFailure: "Action Failed",
  victory: "Victory!",
  actorDamage: "Took Damage",
  actorDrain: "Drained",
  actorGain: "Gained",
  actorLoss: "Lost",
  actorNoDamage: "No Damage",
  actorNoHit: "No Hit",
  actorRecovery: "Recovered",
  alwaysDash: "Always Dash",
  autosave: "Autosave",
  bgmVolume: "BGM Volume",
  bgsVolume: "BGS Volume",
  buffAdd: "Buffed",
  buffRemove: "Buff Removed",
  commandRemember: "Remember Command",
  counterAttack: "Counter Attack",
  criticalToActor: "Critical Hit!",
  criticalToEnemy: "Critical Hit!",
  defeat: "Defeated",
  debuffAdd: "Debuffed",
  emerge: "Emerged",
  enemyDamage: "Took Damage",
  enemyDrain: "Drained",
  enemyGain: "Gained",
  enemyLoss: "Lost",
  enemyNoDamage: "No Damage",
  enemyNoHit: "No Hit",
  enemyRecovery: "Recovered",
  escapeFailure: "Escape Failed",
  escapeStart: "Started Escape",
  evasion: "Evasion",
  expNext: "Next Level",
  expTotal: "Total EXP",
  file: "File",
  loadMessage: "Load Game",
  magicEvasion: "Magic Evasion",
  magicReflection: "Magic Reflection",
  meVolume: "ME Volume",
  obtainSkill: "Learned Skill",
  partyName: "Party Name",
  possession: "Possession",
  preemptive: "Preemptive Strike",
  saveMessage: "Save Game",
  seVolume: "SE Volume",
  substitute: "Substituted",
  surprise: "Surprised",
  touchUI: "Touch UI",
  useItem: "Used Item",
} as const satisfies Terms_Messages;

const mockMap: ReadonlyMap<string, string> = new Map<string, string>([
  ["HP", "ＨＰ"],
  ["MP", "ＭＰ"],
  ["Level", "レベル"],
  ["EXP", "経験値"],
  ["Experience", "経験値"],
  ["Attack", "攻撃"],
  ["Armor", "防具"],
  ["Buy", "購入"],
  ["Cancel", "キャンセル"],
  ["Clear", "クリア"],
  ["Continue", "続きから始める"],
  ["Equip", "装備"],
  ["Equip2", "装備２"],
  ["Escape", "逃げる"],
  ["Fight", "戦う"],
  ["Formation", "編成"],
  ["Game End", "ゲーム終了"],
  ["Guard", "防御"],
  ["Item", "アイテム"],
  ["Key Item", "大事なもの"],
  ["New Game", "ニューゲーム"],
  ["Optimize", "最強装備"],
  ["Options", "オプション"],
  ["Save", "セーブ"],
  ["Sell", "売却"],
  ["Skill", "スキル"],
  ["Status", "ステータス"],
  ["To Title", "タイトルへもどる"],
  ["Weapon", "武器"],
]);

describe("replaceSystemTerms", () => {
  const terms: System_Terms = {
    basic: makeTermsBasic(mockBasicTerms),
    commands: makeTermsCommandArray(mockCommands),
    messages: makeTermsMessages(mockMessages),
    params: makeParamNamesArray({}),
  };
  const replaced = replaceSystemTerms(terms, mockMap);
  test("basic terms are replaced", () => {
    const basicArray: Terms_BasicArray = makeTermsBasic({
      exp: "経験値",
      hp: "ＨＰ",
      mp: "ＭＰ",
      level: "レベル",
      tp: "TP",
      hpA: "ＨＰ",
      mpA: "ＭＰ",
      tpA: "TP",
      levelA: "LV",
      experience: "経験値",
    });
    expect(replaced.basic).toEqual(basicArray);
  });
  test("command terms are replaced", () => {
    const commandArray: Terms_CommandArray = makeTermsCommandArray({
      armor: "防具",
      attack: "攻撃",
      buy: "購入",
      cancel: "キャンセル",
      clear: "クリア",
      continueGame: "続きから始める",
      equip: "装備",
      equip2: "装備２",
      escape: "逃げる",
      fight: "戦う",
      formation: "編成",
      gameEnd: "ゲーム終了",
      guard: "防御",
      item: "アイテム",
      keyItem: "大事なもの",
      newGame: "ニューゲーム",
      optimize: "最強装備",
      options: "オプション",
      save: "セーブ",
      sell: "売却",

      skill: "スキル",
      status: "ステータス",
      toTitle: "タイトルへもどる",
      weapon: "武器",
    });
    expect(replaced.commands).toEqual(commandArray);
  });
});
