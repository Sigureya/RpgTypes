"use strict";module.exports = validate10;module.exports.default = validate10;const schema11 = {"type":"object","required":["code","parameters","indent"],"properties":{"code":{"type":"integer","enum":[320,324,325]},"indent":{"type":"integer"},"parameters":{"type":"array","minItems":2,"maxItems":2,"items":[{"type":"number"},{"type":"string"}]}},"additionalProperties":false};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((data.code === undefined) && (missing0 = "code")) || ((data.parameters === undefined) && (missing0 = "parameters"))) || ((data.indent === undefined) && (missing0 = "indent"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((key0 === "code") || (key0 === "indent")) || (key0 === "parameters"))){validate10.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.code !== undefined){let data0 = data.code;const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/code",schemaPath:"#/properties/code/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(!(((data0 === 320) || (data0 === 324)) || (data0 === 325))){validate10.errors = [{instancePath:instancePath+"/code",schemaPath:"#/properties/code/enum",keyword:"enum",params:{allowedValues: schema11.properties.code.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.indent !== undefined){let data1 = data.indent;const _errs4 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate10.errors = [{instancePath:instancePath+"/indent",schemaPath:"#/properties/indent/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.parameters !== undefined){let data2 = data.parameters;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){if(data2.length > 2){validate10.errors = [{instancePath:instancePath+"/parameters",schemaPath:"#/properties/parameters/maxItems",keyword:"maxItems",params:{limit: 2},message:"must NOT have more than 2 items"}];return false;}else {if(data2.length < 2){validate10.errors = [{instancePath:instancePath+"/parameters",schemaPath:"#/properties/parameters/minItems",keyword:"minItems",params:{limit: 2},message:"must NOT have fewer than 2 items"}];return false;}else {const len0 = data2.length;if(len0 > 0){let data3 = data2[0];const _errs8 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+"/parameters/0",schemaPath:"#/properties/parameters/items/0/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs8 === errors;}if(valid1){if(len0 > 1){const _errs10 = errors;if(typeof data2[1] !== "string"){validate10.errors = [{instancePath:instancePath+"/parameters/1",schemaPath:"#/properties/parameters/items/1/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs10 === errors;}}}}}else {validate10.errors = [{instancePath:instancePath+"/parameters",schemaPath:"#/properties/parameters/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;}