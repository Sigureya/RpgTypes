import { Data_AnyGoodsUnion, Enemy_Action, Data_Enemy, Trait } from '../../rmmz/rpg';
import { Game_Battler } from './battler';
import { Rmmz_Enemy } from './core/battler/enemy';
import { Rmmz_Action } from './core/types';
export declare class Game_Enemy extends Game_Battler implements Partial<Rmmz_Enemy> {
    constructor(enemyId: number, x: number, y: number);
    addNewState(stateId: number): void;
    enemyId(): number;
    enemy(): Data_Enemy;
    isAlive(): boolean;
    isDead(): boolean;
    isHidden(): boolean;
    initialize(enemyId: number, x: number, y: number): void;
    initMembers(): void;
    setup(enemyId: number, x: number, y: number): void;
    index(): number;
    isBattleMember(): boolean;
    traitObjects(): Trait[];
    paramBase(paramId: number): number;
    exp(): number;
    gold(): number;
    makeDropItems(): Data_AnyGoodsUnion[];
    dropItemRate(): number;
    itemObject(kind: number, dataId: number): Data_AnyGoodsUnion | null;
    isSpriteVisible(): boolean;
    screenX(): number;
    screenY(): number;
    battlerName(): string;
    battlerHue(): number;
    originalName(): string;
    name(): string;
    isLetterEmpty(): boolean;
    setLetter(letter: string): void;
    setPlural(plural: boolean): void;
    performActionStart(action: Rmmz_Action): void;
    performAction(action: Rmmz_Action): void;
    performActionEnd(action: Rmmz_Action): void;
    performDamage(): void;
    performCollapse(): void;
    transform(enemyId: number): void;
    meetsCondition(action: Enemy_Action): boolean;
    meetsTurnCondition(param1: number, param2: number): boolean;
    meetsHpCondition(param1: number, param2: number): boolean;
    meetsMpCondition(param1: number, param2: number): boolean;
    meetsStateCondition(param: number): boolean;
    meetsPartyLevelCondition(param: number): boolean;
    meetsSwitchCondition(param: number): boolean;
    isActionValid(action: Enemy_Action): boolean;
    selectAction(actionList: ReadonlyArray<Enemy_Action>, ratingZero: number): void;
    selectAllActions(actionList: ReadonlyArray<Enemy_Action>): void;
    makeActions(): void;
}
