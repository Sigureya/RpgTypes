{"version":3,"file":"mergeItemsSource.es.js","sources":["../../src/libs/namedItemSource/format/core/rule/core/sourceIdentifier/sourceId.ts","../../src/libs/namedItemSource/format/mergeItemsSource.ts"],"sourcesContent":["import type { SourceIdentifier } from \"./types\";\r\n\r\nexport const joinSoruceId = (source: SourceIdentifier): string => {\r\n  return `${source.author}.${source.module}.${source.kind}`;\r\n};\r\n","import type {\r\n  Data_NamedItem,\r\n  FormatCompiled,\r\n  FormatLabelResolved,\r\n  NamedItemSource,\r\n  SourceIdentifier,\r\n} from \"./core\";\r\nimport { joinSoruceId } from \"./core\";\r\n\r\nexport const mergeItemsSource = <Key>(\r\n  formatList: ReadonlyArray<FormatLabelResolved<Key>>,\r\n  namedItemSources: ReadonlyArray<NamedItemSource>\r\n): Map<Key, FormatCompiled> => {\r\n  const sourceMap = mappingNamedItems(namedItemSources);\r\n  return formatList.reduce<Map<Key, FormatCompiled>>((acc, label) => {\r\n    const entry = buildFinalFormatEntry(label, sourceMap);\r\n    acc.set(label.kindId, entry);\r\n    return acc;\r\n  }, new Map());\r\n};\r\n\r\nconst buildFinalFormatEntry = <T>(\r\n  format: FormatLabelResolved<T>,\r\n  sourceMap: ReadonlyMap<string, NamedItemSource>\r\n): FormatCompiled => {\r\n  const source = resolveDataSource(format.dataSource, sourceMap);\r\n  return {\r\n    patternCompiled: format.pattern,\r\n    label: format.label,\r\n    data: source ? source.items : undefined,\r\n  };\r\n};\r\n\r\nconst resolveDataSource = (\r\n  source: SourceIdentifier | undefined,\r\n  sourceMap: ReadonlyMap<string, NamedItemSource>\r\n): NamedItemSource | undefined => {\r\n  if (!source) {\r\n    return undefined;\r\n  }\r\n  return sourceMap.get(joinSoruceId(source));\r\n};\r\n\r\nconst mappingNamedItems = (\r\n  list: ReadonlyArray<NamedItemSource>\r\n): Map<string, NamedItemSource> => {\r\n  return list.reduce<Map<string, NamedItemSource>>((map, item) => {\r\n    const newItem: NamedItemSource = {\r\n      items: cloneItems(item.items), // 余計な情報の削除を兼ねてコピー\r\n      source: item.source,\r\n      label: item.label,\r\n    };\r\n    map.set(joinSoruceId(item.source), newItem);\r\n    return map;\r\n  }, new Map());\r\n};\r\n\r\nconst cloneItems = (list: ReadonlyArray<Data_NamedItem>): Data_NamedItem[] => {\r\n  return list.map<Data_NamedItem>((item) => ({ id: item.id, name: item.name }));\r\n};\r\n"],"names":["joinSoruceId","source","author","module","kind","mergeItemsSource","formatList","namedItemSources","sourceMap","mappingNamedItems","reduce","acc","label","entry","buildFinalFormatEntry","set","kindId","Map","format","resolveDataSource","dataSource","patternCompiled","pattern","data","items","get","list","map","item","newItem","cloneItems","id","name"],"mappings":"AAEa,MAAAA,IAAgBC,CAAAA,OACpB,GAAGA,GAAOC,MAAAA,IAAUD,GAAOE,MAAUF,IAAAA,GAAOG,ICMxCC,IAAAA,IAAmB,CAC9BC,IACAC,OAAAA;AAEM,QAAAC,KAAYC,EAAkBF;AACpC,SAAOD,GAAWI,OAAiC,CAACC,IAAKC,OACjD;AAAA,UAAAC,KAAQC,EAAsBF,IAAOJ;AAEpC,WADHG,GAAAI,IAAIH,GAAMI,QAAQH,EACfF,GAAAA;AAAAA,EAAAA,GACF,oBAAAM,KAGHH;AAAAA,GAAAA,IAAwB,CAC5BI,IACAV,OAAAA;AAEA,QAAMP,KAASkB,EAAkBD,GAAOE,YAAYZ,EAAAA;AAC7C,SAAA,EACLa,iBAAiBH,GAAOI,SACxBV,OAAOM,GAAON,OACdW,MAAMtB,KAASA,GAAOuB,QAAQ,OAAA;AAAA,GAI5BL,IAAoB,CACxBlB,IACAO,OAEA;AAAA,MAAKP,GAGL,QAAOO,GAAUiB,IAAIzB,EAAaC,EAG9BQ,CAAAA;AAAAA,GAAAA,IACJiB,CAAAA,OAEOA,GAAKhB,OAAqC,CAACiB,IAAKC,OAAAA;AACrD,QAAMC,KAA2B;AAAA,IAC/BL,OAAOM,EAAWF,GAAKJ,KACvBvB;AAAAA,IAAAA,QAAQ2B,GAAK3B;AAAAA,IACbW,OAAOgB,GAAKhB;AAAAA,EAGP;AAAA,SADPe,GAAIZ,IAAIf,EAAa4B,GAAK3B,MAAAA,GAAS4B,EAC5BF,GAAAA;AAAAA,GACF,oBAAAV,KAAAA,GAGHa,IAAcJ,CAAAA,OACXA,GAAKC,IAAqBC,CAAAA,QAAU,EAAEG,IAAIH,GAAKG,IAAIC,MAAMJ,GAAKI;"}