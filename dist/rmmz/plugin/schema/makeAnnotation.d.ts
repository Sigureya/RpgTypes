import { Dictionary, OmitBaseParams } from './core';
import type * as Primitve from "./core";
export declare const collectAnnotations: <T>(ant: T, key: ReadonlyArray<string & keyof typeof ant>) => `@${string & keyof T} ${string}`[];
export declare const lookupDictionary: (key: string, dic: Dictionary) => string;
export declare const booleanAnnotations: (bool: OmitBaseParams<Primitve.BooleanArg>, dic?: Dictionary) => `@${"on" | "off"} ${string}`[];
export declare const formatTextAnnotation: <K extends "on" | "off" | "desc" | "text", T extends { [key in K]?: string; }>(bool: T, key: K, dic?: Dictionary) => `@${K} ${string}` | undefined;
export declare const typeAnnotation: (type: Pick<Primitve.AnnotationBase, "type">) => `@type ${string}`;
export declare const baseAnnotions: (ant: Partial<Pick<Primitve.AnnotationBase, "text" | "desc" | "parent">>, dic?: Dictionary) => (`@text ${string}` | `@desc ${string}` | `@parent ${string}`)[];
export declare const numberAnnotations: (num: OmitBaseParams<Primitve.NumberArg>) => (`@digit ${string}` | `@min ${string}` | `@max ${string}`)[];
export declare const selectAnnotations: (select: OmitBaseParams<Primitve.StringSelect | Primitve.NumberSelect>, dic?: Dictionary) => (`@option ${string}` | `@value ${string}` | `@value ${number}`)[];
export declare const comboAnnotations: (combo: OmitBaseParams<Primitve.ComboAnnotation>) => `@option ${string}`[];
export declare const fileAnnotations: (file: OmitBaseParams<Primitve.FilePathAnnotation>) => `@dir ${string}`[];
